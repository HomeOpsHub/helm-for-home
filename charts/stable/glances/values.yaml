# Default values for glances
# System monitoring and performance analysis tool

# Common chart configuration
common:
  # Chart metadata
  chart:
    name: glances
    description: "Real-time performance monitoring tool"
    maintainers:
      - name: "helm-for-home"
        url: "https://github.com/atulmgupta/helm-for-home"

# Application configuration
app:
  # Basic deployment settings
  replicaCount: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  # Image configuration
  image:
    repository: nicolargo/glances
    tag: "latest-full"
    pullPolicy: IfNotPresent
    pullSecrets: []

  # Service account
  serviceAccount:
    create: true
    automount: true
    annotations: {}
    name: ""

  # Pod configuration
  pod:
    annotations: {}
    labels: {}
    securityContext:
      # Required for system monitoring
      privileged: true
      hostNetwork: true
      hostPID: true
    terminationGracePeriodSeconds: 30
    dnsPolicy: ClusterFirst
    restartPolicy: Always

  # Container security context
  securityContext:
    privileged: true
    # Required capabilities for system monitoring
    # capabilities:
    #   add:
    #   - SYS_ADMIN
    #   - SYS_PTRACE

  # Service configuration
  service:
    type: ClusterIP
    port: 61208
    targetPort: 61208
    protocol: TCP
    annotations: {}

# Networking configuration
networking:
  # Ingress configuration
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # cert-manager.io/cluster-issuer: letsencrypt-prod
    hosts:
      - host: glances.local
        paths:
          - path: /
            pathType: Prefix
            port: 61208
    tls: []
    #  - secretName: glances-tls
    #    hosts:
    #      - glances.local

  # Traefik IngressRoute (alternative to Ingress)
  ingressRoute:
    enabled: false
    metadata:
      name: ""
      namespace: ""
      annotations: {}
    spec:
      entrypoints:
        - websecure
      routes:
        - match: Host(`glances.local`)
          kind: Rule
          services:
            - name: glances
              port: 61208
      tls:
        enabled: false
        secretName: ""
        domains: []

# Application-specific configuration
glances:
  # Web server mode enabled by default
  mode: "web"
  # Additional command line options
  options: "-w"
  # Configuration file content (optional)
  config: ""
  # Environment variables
  env: []
  # - name: TZ
  #   value: "UTC"
  # - name: GLANCES_OPT
  #   value: "-w"

# Storage configuration
storage:
  # Volume mounts for system monitoring
  volumeMounts:
    - name: proc
      mountPath: /host/proc
      readOnly: true
    - name: sys
      mountPath: /host/sys
      readOnly: true
    - name: docker-sock
      mountPath: /var/run/docker.sock
      readOnly: true

  # Volumes for system monitoring
  volumes:
    - name: proc
      hostPath:
        path: /proc
    - name: sys
      hostPath:
        path: /sys
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock

  # Additional volumes
  additionalVolumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volume mounts
  additionalVolumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

# Resource management
resources:
  limits: {}
    # cpu: 500m
    # memory: 512Mi
  requests: {}
    # cpu: 100m
    # memory: 128Mi

# Health checks
healthchecks:
  livenessProbe:
    enabled: true
    httpGet:
      path: /
      port: 61208
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    enabled: true
    httpGet:
      path: /
      port: 61208
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

  startupProbe:
    enabled: false
    httpGet:
      path: /
      port: 61208
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 30

# Autoscaling (disabled for monitoring applications)
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Scheduling
scheduling:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Example: Run on monitoring nodes
  # nodeSelector:
  #   role: monitoring
  # tolerations:
  # - key: "monitoring"
  #   operator: "Equal"
  #   value: "true"
  #   effect: "NoSchedule"

# Monitoring and observability
monitoring:
  # ServiceMonitor for Prometheus
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    annotations: {}

  # PodMonitor for Prometheus
  podMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    labels: {}
    annotations: {}

# Configuration management
config:
  # Create ConfigMap for application configuration
  enabled: false
  # Configuration data
  data: {}
  # Mount path for configuration
  mountPath: /config

# Secrets management
secrets:
  # Create Secret for sensitive data
  enabled: false
  # Secret data
  data: {}
  # Mount path for secrets
  mountPath: /secrets

# ServiceMonitor configuration for Prometheus operator
serviceMonitor:
  enabled: false
  namespace: ""
  interval: 30s
  scrapeTimeout: 10s
  port: http
  path: /metrics
  labels: {}
  annotations: {}

# Testing
tests:
  enabled: true
  image:
    repository: busybox
    tag: 1.35
    pullPolicy: IfNotPresent
